{"title":"weak原理探索","slug":"weak原理探索","date":"2018-06-15T07:56:48.000Z","updated":"2018-08-05T08:18:00.540Z","comments":true,"excerpt":"","content":"<h3 id=\"weak-指针\"><a href=\"#weak-指针\" class=\"headerlink\" title=\"weak 指针\"></a>weak 指针</h3><p>weak是弱引用，所引用对象的计数器不会加一，并在引用对象被释放的时候自动被设置为nil。通常用于解决循环引用问题。</p>\n<h3 id=\"weak-表\"><a href=\"#weak-表\" class=\"headerlink\" title=\"weak 表\"></a>weak 表</h3><p>runtime 维护了一个 weak 表，用于存储指向某个对象的所有 weak 指针。weak 表是一个 hash 表：<br><img src=\"https://upload-images.jianshu.io/upload_images/6365912-7bca92ed1c76841e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"weak 表\"></p>\n<h3 id=\"weak-实现原理\"><a href=\"#weak-实现原理\" class=\"headerlink\" title=\"weak 实现原理\"></a>weak 实现原理</h3><h5 id=\"1、初始化时：runtime-会调用-objc-initWeak-函数，objc-initWeak-函数会初始化一个新的-weak-指针指向对象的地址。\"><a href=\"#1、初始化时：runtime-会调用-objc-initWeak-函数，objc-initWeak-函数会初始化一个新的-weak-指针指向对象的地址。\" class=\"headerlink\" title=\"1、初始化时：runtime 会调用 objc_initWeak() 函数，objc_initWeak() 函数会初始化一个新的 weak 指针指向对象的地址。\"></a>1、初始化时：runtime 会调用 objc_initWeak() 函数，objc_initWeak() 函数会初始化一个新的 weak 指针指向对象的地址。</h5><pre><code>// object 是要初始化的指针，value 是指针指向的对象\nid objc_initWeak(id *object, id value);\n</code></pre><p>objc_initWeak() 方法的实现如下：</p>\n<pre><code>id objc_initWeak(id *location, id newObj) {\n  // 查看对象实例是否有效\n  // 无效对象直接导致指针释放\n  if (!newObj) {\n    *location = nil;\n    return nil;\n  }\n  // 这里传递了三个 bool 数值\n  // 使用 template 进行常量参数传递是为了优化性能\n  return storeWeakfalse/*old*/, true/*new*/, true/*crash*/&gt;\n  (location, (objc_object*)newObj);\n}\n</code></pre><p>这里判断了其指针指向的对象是否有效，无效则直接释放，不再往调用深层函数。若有效，则调用 objc_storeWeak() 函数，要被初始化的指针（object）将被注册为一个指向对象（value）的 __weak 指针对象。</p>\n<blockquote>\n<p>objc_initWeak() 函数有一个前提条件：就是 object 必须是一个没有被注册为__weak 对象的有效指针。而 value 则可以是 null，或者指向一个有效的对象。</p>\n</blockquote>\n<h5 id=\"2、添加引用时：objc-initWeak-函数会调用-objc-storeWeak-函数，-objc-storeWeak-的作用是更新指针指向，创建对应的弱引用表。\"><a href=\"#2、添加引用时：objc-initWeak-函数会调用-objc-storeWeak-函数，-objc-storeWeak-的作用是更新指针指向，创建对应的弱引用表。\" class=\"headerlink\" title=\"2、添加引用时：objc_initWeak() 函数会调用 objc_storeWeak() 函数， objc_storeWeak() 的作用是更新指针指向，创建对应的弱引用表。\"></a>2、添加引用时：objc_initWeak() 函数会调用 objc_storeWeak() 函数， objc_storeWeak() 的作用是更新指针指向，创建对应的弱引用表。</h5><pre><code>id objc_storeWeak(id *location, id value);\n</code></pre><p>1）创建 weak 弱引用表<br>2）解除旧对象的弱引用表<br>3）将新的弱引用表与对象进行关联绑定</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6365912-be5dc3924e9a8e0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"初始化弱引用对象流程\"></p>\n<h5 id=\"3、释放时，调用-clearDeallocating-函数。clearDeallocating-函数首先根据对象地址获取所有-weak-指针地址的数组，然后遍历这个数组把其中的数据设为-nil，最后把这个-entry-从-weak-表中删除，最后清理对象的记录。\"><a href=\"#3、释放时，调用-clearDeallocating-函数。clearDeallocating-函数首先根据对象地址获取所有-weak-指针地址的数组，然后遍历这个数组把其中的数据设为-nil，最后把这个-entry-从-weak-表中删除，最后清理对象的记录。\" class=\"headerlink\" title=\"3、释放时，调用 clearDeallocating 函数。clearDeallocating 函数首先根据对象地址获取所有 weak 指针地址的数组，然后遍历这个数组把其中的数据设为 nil，最后把这个 entry 从 weak 表中删除，最后清理对象的记录。\"></a>3、释放时，调用 clearDeallocating 函数。clearDeallocating 函数首先根据对象地址获取所有 weak 指针地址的数组，然后遍历这个数组把其中的数据设为 nil，最后把这个 entry 从 weak 表中删除，最后清理对象的记录。</h5>","thumbnail":"https://upload-images.jianshu.io/upload_images/6365912-be5dc3924e9a8e0d.png","categories":[],"tags":[{"name":"iOS","path":"api/tags/iOS.json"}]}