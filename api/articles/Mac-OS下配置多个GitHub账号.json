{"title":"Mac OS下配置多个GitHub账号","slug":"Mac-OS下配置多个GitHub账号","date":"2018-08-01T08:07:49.000Z","updated":"2018-08-06T10:06:03.135Z","comments":true,"excerpt":"","content":"<p>以前在学校用的实验室的 iMac，现在大三出来实习了，给自己买了一台 MacBook Pro。之前在 GitHub 上搭建了个人博客，写写知识总结或者生活分享也还是不错的。后来到了公司，用的也是自己的电脑，刚来也不懂 Git，以前在学校也只把 GitHub 当做存放代码的地方，公司用的企业版的 GitHub，给了我一个账号，于是我傻乎乎地照着网上一顿配置，直接设置了全局的 name 和 email，给后来挖了一个坑。</p>\n<p>本来没打算折腾的，用简书或者掘金写写博客也还是不错的。可是最近在看一些技术博客，很喜欢 <a href=\"https://bestswifter.com\" target=\"_blank\" rel=\"noopener\">bestswifter</a> 写的文章，不是说有多高深，而是能够把知识说得很通俗易懂，他自己也说“喜欢研究问题的本质，讨厌一切不说人话的描述”。能做到这一点，想必自己对问题已经理解得很透彻了。今天偶然点开霜神的博客 <a href=\"https://halfrost.com/ghost_feature/\" target=\"_blank\" rel=\"noopener\">一缕殇流化隐半边冰霜</a>，糟了，是心动的感觉，也太好看了叭。于是下定决心要把博客给迁移过来。</p>\n<p>我的博客是在 GitHub 上搭建的，但是现在电脑上只配置了公司的 GitHub 账号。于是第一步，把我以前的 GitHub 账号配置到现在这台电脑上来，而且不能与公司的产生冲突。Google 了许多教程，对于一个小白来说，而且电脑上已经配置好了公司的账号，自然不敢瞎搞。参考对比了几篇教程，都或多或少有些许遗漏，（可能对于大神来说都知道了，但对于我这种小白来说，每一步都是很重要很谨慎的）。于是根据自己的经历，给大家分享一篇相对完整的教程。废话到此为止，let’s go。</p>\n<h4 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h4><p>要在同一台电脑上配置两个 GitHub 账号，（GitLab，码云同理）,需要生成各自配套的 SSH Key。这样，在 clone 和 push 代码的时候，就能区分用的是哪个账号。</p>\n<h4 id=\"取消全局设定\"><a href=\"#取消全局设定\" class=\"headerlink\" title=\"取消全局设定\"></a>取消全局设定</h4><p>如果之前在 git config 中全局设置过用户名和邮箱，则需要先取消设置。这个用户名和邮箱是记录每一次 commit 的用户和关联的邮箱。公司和个人用的是不同的邮箱，所以应该分别设置。这里在后面再说。</p>\n<pre><code>git config --global --unset user.name\ngit config --global --unset user.email\n</code></pre><h4 id=\"生成-SSH-Key\"><a href=\"#生成-SSH-Key\" class=\"headerlink\" title=\"生成 SSH Key\"></a>生成 SSH Key</h4><pre><code>$ ssh-keygen -t rsa -C &quot;youremail@xxx.com&quot;\n</code></pre><p>按一次回车后：</p>\n<pre><code>Generating public/private rsa key pair.\nEnter file in which to save the key (/Users/Shinancao/.ssh/id_rsa): id_rsa_company(取个名字)\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in \nid_rsa_company\nYour public key has been saved in \nid_rsa_company.pub.\n</code></pre><p>这里我首先设置的是公司的 SSH Key，使用的是公司邮箱。记得要给 SSH Key 取一个名字，不然会使用默认的名字，当后面再设置个人的 SSH Key 时，如果还使用的默认的名字，则会把前面的覆盖掉。好了，接着按上面的方式创建个人的 SSH Key，这次我取的名字是 id_rsa_personal。这样，就生成了两套 SSH Key。如果生成的 Key 不在 .ssh 文件夹中，可以拖进去。</p>\n<h4 id=\"在-GitHub-上添加-Key\"><a href=\"#在-GitHub-上添加-Key\" class=\"headerlink\" title=\"在 GitHub 上添加 Key\"></a>在 GitHub 上添加 Key</h4><p>为了避免新手读者不知道怎么添加，在这里我还是提一下吧。在本地通过 <code>cat ~/.ssh/ssh_key_name.pub</code> 获取公钥的内容，复制，然后登录 GitHub 账号，点击 Settings-&gt;SSH and GPG keys&gt;New SSH Key 进行添加。</p>\n<h4 id=\"在本地-SSH-Agent-中添加-Key\"><a href=\"#在本地-SSH-Agent-中添加-Key\" class=\"headerlink\" title=\"在本地 SSH Agent 中添加 Key\"></a>在本地 SSH Agent 中添加 Key</h4><p>只有在本地的 SSH Agent 中添加了 Key，这样 SSH 服务器才能找到 id_rsa。</p>\n<pre><code>ssh-add -K ~/.ssh/id_rsa_personal\nssh-add -K ~/.ssh/id_rsa_company\n</code></pre><h4 id=\"修改-SSH-config-文件\"><a href=\"#修改-SSH-config-文件\" class=\"headerlink\" title=\"修改 SSH config 文件\"></a>修改 SSH config 文件</h4><p>config 文件不是默认生产的，有些人可能会没有，所以可以先创建一个。先进入到 .ssh 文件中<code>cd ~/.ssh</code>，然后执行 <code>touch config</code>进行创建。</p>\n<p>打开刚才创建好的 config 文件，然后在里面添加如下内容：</p>\n<pre><code># personal\nHost personal.github.com\nHostName github.com\nUser git\nIdentityFile ~/.ssh/id_rsa\n\n# company\nHost company.github.com  # 这个名字可任意设置\nHostName github.com\nUser git\nIdentityFile ~/.ssh/id_rsa_work\n</code></pre><p>OK，现在让我们测试一下配置是否成功：</p>\n<pre><code>ssh -T git@personal.github.com\nssh -T git@company.github.com\n</code></pre><p>如果输出以下内容：</p>\n<pre><code>Hi xxx! You&apos;ve successfully authenticated\n</code></pre><p>恭喜你，已经配置成功了！慢着慢着，刚才把全局设置给取消了，现在是不是要单独设置回来，没错，取消了全局设置的用户和邮箱后，我们要为每一个项目进行单独设置。我先给大家讲一下现在该如何对项目进行设置。</p>\n<h4 id=\"最后一步\"><a href=\"#最后一步\" class=\"headerlink\" title=\"最后一步\"></a>最后一步</h4><p>由于我们设置了 Host，这就相当于是 HostName 的别名。比如现在对个人 GitHub 上的 repo 进行 clone 的时候，要改成 <code>git clone git@personal.github.com:xxx/xxx.git</code>。如果是已经克隆到本地的项目，则可以在项目中修改：</p>\n<pre><code>$ git remote rm origin\n$ git remote add origin git@personal.github.com:xxx/xxx.git\n</code></pre><p>可以执行 <code>git remote -v</code> 查看是否修改成功。</p>\n<p>然后在每个项目中，执行：</p>\n<pre><code>git config user.email &quot;xxx@xxx.com&quot;\ngit config user.name &quot;xxname&quot;\n</code></pre><p>对公司和个人项目单独设置用户名和邮箱。<br>可以查看一下：</p>\n<pre><code>git config user.name\ngit config user.email\n</code></pre><p>push 的话还是照常使用：<code>git push origin master</code></p>\n<p>好啦，全部设置完了，终于可以继续把我 GitHub 上的博客迁移过来了。</p>\n<p>迁移的教程：<a href=\"https://www.zhihu.com/question/21193762\" target=\"_blank\" rel=\"noopener\">使用hexo，如果换了电脑怎么更新博客？\n</a></p>\n<p>再贴一个我的个人博客：<a href=\"https://hzsss.github.io\" target=\"_blank\" rel=\"noopener\">hzsss</a></p>\n","thumbnail":"/img/github.jpg","categories":[],"tags":[{"name":"技术","path":"api/tags/技术.json"}]}